version: 2
jobs:
  validate:
    docker:
      - image: wunderio/silta-circleci:v0.1

    steps:
      - checkout

      - run: phpcs --standard=phpcs.xml -s

      - run: helm unittest ./chart

      - run: |
          if ! grep machbarmacher/gdpr-dump composer.json; then
            echo "Please install machbarmacher/gdpr-dump for sanitized database dumps."
          elif [ ! -f gdpr.json ]; then
            echo "machbarmacher/gdpr-dump is present but no gdpr.json was found."
          fi

  build:
    docker:
      - image: wunderio/silta-circleci:v0.1

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}

      - run: |
          composer install -n --prefer-dist --ignore-platform-reqs --no-dev

      - save_cache:
          paths:
            - ./vendor
            - ./web/core
            - ./web/modules/contrib
            - ./web/themes/contrib
            - ./web/profiles/contrib
            - ./web/libraries
          key: v1-dependencies-{{ checksum "composer.lock" }}

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
            - v1-yarn-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-yarn-{{ checksum "yarn.lock" }}

      - setup_remote_docker

      - run: |
          #echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $DOCKER_REPO_HOST
          echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://eu.gcr.io

          # Build the Nginx image and push it to the repository.
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1 web
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1

          # Build the Drupal image and push it to the repository.
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-drupal:$CIRCLE_SHA1 .
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-drupal:$CIRCLE_SHA1

  deploy:
    docker:
      - image: wunderio/silta-circleci:v0.1

    steps:
      - checkout

      # Set the release name for later reuse.
      # Release name length is 37 chars long, which leaves max 16 chars for kubernetes resource name.
      # Release name is prefixed with w because  it _HAS_ to start with alphabetic character. w 4 wunder.
      - run: |
          LOWERCASE_BRANCH=${CIRCLE_BRANCH,,}
          REPONAME_HASH=$(echo ${CIRCLE_PROJECT_REPONAME,,} | shasum -a 256 | cut -c 1-8 )
          BRANCHNAME_HASH=$(echo $LOWERCASE_BRANCH | shasum -a 256 | cut -c 1-8 )
          BRANCHNAME_TRUNCATED=$(echo ${LOWERCASE_BRANCH//[^[:alnum:]]/-} | cut -c 1-20 | sed 's/^\(.*\)-$/\1/' )
          echo "export RELEASE_NAME='w$REPONAME_HASH-$BRANCHNAME_HASH-$BRANCHNAME_TRUNCATED'" >> $BASH_ENV

      - run: |
          echo $GCLOUD_KEY_JSON > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud config set project silta-204108
          gcloud config set compute/zone europe-west2-a
          gcloud container clusters get-credentials silta-1 --zone europe-west2-a --project silta-204108

      - run: |
          helm dependency build ./chart

          helm upgrade --install $RELEASE_NAME ./chart \
            --set environmentName=$CIRCLE_BRANCH \
            --set php.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-drupal:$CIRCLE_SHA1 \
            --set nginx.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1 \
            --set mariadb.rootUser.password=$DB_ROOT_PASS \
            --set mariadb.db.password=$DB_USER_PASS \
            --namespace=${CIRCLE_PROJECT_REPONAME,,} \
            --values silta.yml

          echo "Log output from the deployment container"
          kubectl logs job/${RELEASE_NAME}-post-release -n ${CIRCLE_PROJECT_REPONAME,,} -f --pod-running-timeout=3m

workflows:
  version: 2
  commit:
    jobs:
      - validate
      - build:
          context: global_nonprod
      - deploy:
          context: global_nonprod
          requires:
            - build
