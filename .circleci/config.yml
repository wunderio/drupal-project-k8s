version: 2.1

orbs:
  silta:
    # CircleCI executors
    executors:
      silta:
        docker:
          - image: wunderio/silta-circleci:v0.1

    # CircleCI Jobs
    jobs:
      drupal-validate:
        executor: silta
        parameters:
          drupal-root:
            type: string
            default: "."
          post-validation:
            type: steps
            default: []
        working_directory: ~/project/<<parameters.drupal-root>>
        steps:
          - checkout:
              path: ~/project
          - phpcs
          - run:
              name: Silta basic checks
              command: |
                files=(
                  silta/silta.yml
                  silta/silta-prod.yml
                  silta/nginx.Dockerfile
                  silta/php.Dockerfile
                  silta/shell.Dockerfile
                  web/sites/default/settings.silta.php
                )

                for file in ${files[@]}; do
                  if [ -f $file ]; then
                    echo "✅ $file is present"
                  else
                    echo "❌ $file is missing from the repository."
                    exit 1
                  fi
                done

                if grep "drush.*8" composer.json; then
                  echo "❌ Silta is not compatible with drush 8."
                fi

          - steps: <<parameters.post-validation>>

      drupal-build-deploy:
        executor: silta
        parameters:
          drupal-root:
            type: string
            default: "."
          codebase-build:
            type: steps
            default: []
          pre-release:
            description: Steps to be executed before the Helm release is created.
            type: steps
            default: []
          chart_name:
            type: string
            default: drupal
          chart_repository:
            type: string
            default: https://wunderio.github.io/charts/
          silta_config:
            type: string
            default: "silta/silta.yml"
          skip-deployment:
            type: boolean
            default: false
        working_directory: ~/project/<<parameters.drupal-root>>
        steps:
          - checkout:
              path: ~/project
          - steps: <<parameters.codebase-build>>
          - unless:
              condition: <<parameters.skip-deployment>>
              steps:
                - gcloud-login
                - drupal-docker-build
                - set-release-name
                - steps: <<parameters.pre-release>>
                - drupal-helm-deploy:
                    chart_name: <<parameters.chart_name>>
                    chart_repository: <<parameters.chart_repository>>
                    silta_config: <<parameters.silta_config>>

      # Deprecated in favor of drupal-build-deploy.
      drupal-build:
        executor: silta
        parameters:
          drupal-root:
            type: string
            default: "."
          codebase-build:
            type: steps
            default: []
        working_directory: ~/project/<<parameters.drupal-root>>
        steps:
          - run: echo "Deprecated, update to drupal-build-deploy in your CircleCI configuration."
          - checkout:
              path: ~/project
          - steps: <<parameters.codebase-build>>
          - setup_remote_docker
          - run:
              name: Build docker images
              command: |
                # Login to the docker registry.
                echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://eu.gcr.io

                # Build the Nginx image and push it to the repository.
                docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1 -f silta/nginx.Dockerfile web
                docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1

                # Build the Drupal image and push it to the repository.
                docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-php:$CIRCLE_SHA1 -f silta/php.Dockerfile .
                docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-php:$CIRCLE_SHA1

                # Build the Shell image and push it to the repository.
                docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-shell:$CIRCLE_SHA1 -f silta/shell.Dockerfile .
                docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-shell:$CIRCLE_SHA1

      # Deprecated in favor of drupal-build-deploy.
      drupal-deploy:
        executor: silta
        parameters:
          drupal-root:
            type: string
            default: "."
          pre-release:
            description: Steps to be executed before the Helm release is created.
            type: steps
            default: []
          chart_name:
            type: string
            default: drupal
          chart_repository:
            type: string
            default: https://wunderio.github.io/charts/
          silta_config:
            type: string
            default: "silta/silta.yml"
        working_directory: ~/project/<<parameters.drupal-root>>
        steps:
          - run: echo "Deprecated, update to drupal-build-deploy in your CircleCI configuration."
          - checkout:
              path: ~/project
          - set-release-name
          - gcloud-login
          - steps: <<parameters.pre-release>>
          - run:
              name: Deploy helm release
              command: |
                if [[ "$( helm list --failed | grep $RELEASE_NAME  | cut -f2 )" -eq 1 ]]; then
                  echo "Removing failed first release"
                  helm delete --purge $RELEASE_NAME
                  sleep 30
                fi

                helm upgrade --install $RELEASE_NAME <<parameters.chart_name>> \
                  --repo "<<parameters.chart_repository>>" \
                  --set environmentName=$CIRCLE_BRANCH \
                  --set php.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-php:$CIRCLE_SHA1 \
                  --set nginx.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$CIRCLE_SHA1 \
                  --set shell.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-shell:$CIRCLE_SHA1 \
                  --set mariadb.rootUser.password=$DB_ROOT_PASS \
                  --set mariadb.db.password=$DB_USER_PASS \
                  --set shell.gitAuth.repositoryUrl="${CIRCLE_REPOSITORY_URL}" \
                  --set shell.gitAuth.apiToken="${GITAUTH_API_TOKEN}" \
                  --namespace=${CIRCLE_PROJECT_REPONAME,,} \
                  --values <<parameters.silta_config>>
          - run:
              name: Deployment log
              when: always
              command: |
                kubectl logs job/${RELEASE_NAME}-post-release -n ${CIRCLE_PROJECT_REPONAME,,} -f --timestamps=true
          - run:
              name: Release information
              command: helm status $RELEASE_NAME

    # CircleCI commands
    commands:
      phpcs:
        steps:
          - run:
              name: phpcs validation
              command: phpcs --standard=phpcs.xml -s

      drupal-composer-install:
        steps:
          - restore_cache:
              keys:
                - v1-dependencies-{{ checksum "composer.lock" }}

          - run:
              name: composer install
              command: composer install -n --prefer-dist --ignore-platform-reqs --no-dev --optimize-autoloader

          - save_cache:
              paths:
                - ./vendor
                - ./web/core
                - ./web/modules/contrib
                - ./web/themes/contrib
                - ./web/profiles/contrib
                - ./web/libraries
              key: v1-dependencies-{{ checksum "composer.lock" }}

      yarn-install:
        steps:
          - restore_cache:
              keys:
                - v1-yarn-{{ checksum "yarn.lock" }}
                - v1-yarn-

          - run: yarn install

          - save_cache:
              paths:
                - node_modules
              key: v1-yarn-{{ checksum "yarn.lock" }}

      build-docker-image:
        parameters:
          dockerfile:
            type: string
          path:
            type: string
          identifier:
            type: string
        steps:
          - run:
              name: Build <<parameters.identifier>> docker image
              command: |
                IMAGE_URL=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-<<parameters.identifier>>

                # Take a hash of all files in the folder except those ignored by docker.
                # Also make sure modification time or order play no role.
                IMAGE_TAG=`tar \
                  --sort=name \
                  --exclude-from=<<parameters.path>>/.dockerignore \
                  --mtime='2000-01-01 00:00Z' \
                  --clamp-mtime \
                  -cf - <<parameters.path>> | sha1sum | cut -c 1-40`

                if gcloud container images list-tags $IMAGE_URL | grep -q $IMAGE_TAG;
                then
                  echo "This <<parameters.identifier>> image has already been built, the existing image from the Docker repository will be used."
                else
                  docker build -t $IMAGE_URL:$IMAGE_TAG -f <<parameters.dockerfile>> <<parameters.path>>
                  docker push $IMAGE_URL:$IMAGE_TAG
                fi

                # Persist the image tag so it is available during deployment.
                echo "export <<parameters.identifier>>_HASH='$IMAGE_TAG'" >> $BASH_ENV


      npm-install-build:
        parameters:
          path:
            type: string
            default: "."
          build-command:
            type: string
            default: "npm run build"

        steps:
          - restore_cache:
              keys:
                - v1-npm-{{ checksum "<<parameters.path>>/package-lock.json" }}
                - v1-npm-

          - run:
              name: Install frontend dependencies
              command: |
                cd <<parameters.path>>
                npm install

          - run:
              name: Build frontend
              command: |
                cd <<parameters.path>>
                <<parameters.build-command>>

          - save_cache:
              paths:
                - <<parameters.path>>/node_modules
              key: v1-npm-{{ checksum "<<parameters.path>>/package-lock.json" }}

      drupal-docker-build:
        steps:
          - setup_remote_docker

          - run:
              name: Login to the docker registry
              command: echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://$DOCKER_REPO_HOST

          - build-docker-image:
              dockerfile: silta/nginx.Dockerfile
              path: web
              identifier: nginx

          - build-docker-image:
              dockerfile: silta/php.Dockerfile
              path: "."
              identifier: php

          - build-docker-image:
              dockerfile: silta/shell.Dockerfile
              path: "."
              identifier: shell

      set-release-name:
        steps:
          - run:
              name: Set release name
              command: |
                # Release name length is 37 chars long, which leaves max 16 chars for kubernetes resource name.
                # Release name is prefixed with w because  it _HAS_ to start with alphabetic character. w 4 wunder.
                BRANCHNAME_LOWER=${CIRCLE_BRANCH,,}
                BRANCHNAME=${BRANCHNAME_LOWER//[^[:alnum:]]/-}
                BRANCHNAME_HASH=$(echo -n $BRANCHNAME | shasum -a 256 | cut -c 1-4 )
                BRANCHNAME_TRUNCATED=$(echo $BRANCHNAME | cut -c 1-15 | sed 's/^\(.*\)-$/\1/' )
                REPONAME=${CIRCLE_PROJECT_REPONAME,,}
                REPONAME_HASH=$(echo -n $REPONAME | shasum -a 256 | cut -c 1-4 )
                REPONAME_TRUNCATED=$(echo $REPONAME | cut -c 1-15 | sed 's/^\(.*\)-$/\1/' )
                # Truncate long names
                if [ ${#BRANCHNAME} -ge 25 ]; then BRANCHNAME=$BRANCHNAME_TRUNCATED-$BRANCHNAME_HASH; fi;
                if [ ${#REPONAME} -ge 25 ]; then REPONAME=$REPONAME_TRUNCATED-$REPONAME_HASH; fi;
                echo "export RELEASE_NAME='$REPONAME--$BRANCHNAME'" >> $BASH_ENV

      gcloud-login:
        steps:
          - run:
              name: Google Cloud login
              command: |
                # Save key, authenticate and set compute zone.
                echo $GCLOUD_KEY_JSON > ${HOME}/gcloud-service-key.json
                gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json --project $GCLOUD_PROJECT_NAME
                gcloud config set compute/zone $GCLOUD_COMPUTE_ZONE

                # Updates a kubeconfig file with appropriate credentials and endpoint information.
                gcloud container clusters get-credentials $GCLOUD_CLUSTER_NAME --zone $GCLOUD_COMPUTE_ZONE --project $GCLOUD_PROJECT_NAME

      drupal-helm-deploy:
        parameters:
          chart_name:
            type: string
          chart_repository:
            type: string
          silta_config:
            type: string
        steps:
          - run:
              name: Deploy helm release
              command: |
                if [[ "$( helm list --failed | grep $RELEASE_NAME  | cut -f2 )" -eq 1 ]]; then
                  echo "Removing failed first release"
                  helm delete --purge $RELEASE_NAME
                  sleep 30
                fi

                helm upgrade --install $RELEASE_NAME <<parameters.chart_name>> \
                  --repo "<<parameters.chart_repository>>" \
                  --set environmentName=$CIRCLE_BRANCH \
                  --set php.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-php:$php_HASH \
                  --set nginx.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-nginx:$nginx_HASH \
                  --set shell.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/${CIRCLE_PROJECT_REPONAME,,}-shell:$shell_HASH \
                  --set mariadb.rootUser.password=$DB_ROOT_PASS \
                  --set mariadb.db.password=$DB_USER_PASS \
                  --set shell.gitAuth.repositoryUrl="${CIRCLE_REPOSITORY_URL}" \
                  --set shell.gitAuth.apiToken="${GITAUTH_API_TOKEN}" \
                  --namespace=${CIRCLE_PROJECT_REPONAME,,} \
                  --values <<parameters.silta_config>>

          - run:
              name: Deployment log
              when: always
              command: |
                kubectl logs job/${RELEASE_NAME}-post-release -n ${CIRCLE_PROJECT_REPONAME,,} -f --timestamps=true

          - run:
              name: Release information
              command: helm status $RELEASE_NAME

workflows:
  version: 2
  commit:
    jobs:
      - silta/drupal-validate:
          name: validate
          post-validation:
            - run: helm unittest ./chart
            - run: |
                if ! grep machbarmacher/gdpr-dump composer.json; then
                  echo "Please install machbarmacher/gdpr-dump for sanitized database dumps."
                elif [ ! -f gdpr.json ]; then
                  echo "machbarmacher/gdpr-dump is present but no gdpr.json was found."
                fi

      - silta/drupal-build-deploy: &build-deploy
          name: build-deploy
          # Use a local chart during development.
          chart_name: "./chart"
          chart_repository: ""
          codebase-build:
            - silta/drupal-composer-install
            - silta/yarn-install
          pre-release:
            - run:
                name: Build local helm dependencies
                command: helm dependency build ./chart

          context: global_nonprod
          filters:
            branches:
              ignore: production

      - silta/drupal-build-deploy:
          # Extend the build-deploy configuration for the production environment.
          <<: *build-deploy
          name: build-deploy-prod
          silta_config: silta/silta.yml,silta/silta-prod.yml
          context: global_nonprod
          filters:
            branches:
              only: production
