version: 2
jobs:
  phpcs:
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      - run: phpcs --standard=phpcs.xml -s

  build:
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}

      - run: composer install -n --prefer-dist --ignore-platform-reqs --no-dev

      - save_cache:
          paths:
            - ./vendor
            - ./web/core
            - ./web/modules/contrib
            - ./web/themes/contrib
            - ./web/profiles/contrib
            - ./web/libraries
          key: v1-dependencies-{{ checksum "composer.lock" }}

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
            - v1-yarn-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-yarn-{{ checksum "yarn.lock" }}

      - setup_remote_docker

      - run: |
          #echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $DOCKER_REPO_HOST
          echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://eu.gcr.io

          # Build the Nginx image and push it to the repository.
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-nginx:$CIRCLE_SHA1 web
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-nginx:$CIRCLE_SHA1

          # Build the Drupal image and push it to the repository.
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-drupal:$CIRCLE_SHA1 .
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-drupal:$CIRCLE_SHA1

  deploy:
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      # Set the release name for later reuse.
      - run: |
          LOWERCASE_BRANCH=${CIRCLE_BRANCH,,}
          echo "export RELEASE_NAME='${LOWERCASE_BRANCH//[^[:alnum:]]/-}'" >> $BASH_ENV

      - run: |
          echo $GCLOUD_KEY_JSON > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud config set project silta-204108
          gcloud config set compute/zone europe-west2-a
          gcloud container clusters get-credentials silta-1 --zone europe-west2-a --project silta-204108
          kubectl config get-contexts
          helm init
          echo $CIRCLE_BRANCH
          echo $CIRCLE_PROJECT_REPONAME
      
      # # Read and decrypt secrets and create volumes
      # # TODO: agree on concept for secrets management and consider using for sensitive secrets
      # - run: |
      #     # read secrets (created with "openssl aes-256-cbc -e -in secrets -out secrets.enc -k $ENC_KEY")
      #     ARGS=$(openssl aes-256-cbc -d -base64 -in secrets.enc -k $ENC_KEY | while \ 
      #     read line ; do echo -n "--from-literal=$line "; done)
      #     # generate secrets volumes for use in pods
      #     kubectl create secret generic $RELEASE_NAME-drupal-secrets \ 
      #     --namespace=$CIRCLE_PROJECT_REPONAME $ARGS

      - run: |
          helm dependency build ./chart

          helm upgrade --install $RELEASE_NAME ./chart \
            --set drupal.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-drupal:$CIRCLE_SHA1 \
            --set nginx.image=$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$CIRCLE_PROJECT_REPONAME-nginx:$CIRCLE_SHA1 \
            --set mariadb.rootUser.password=$DB_ROOT_PASS \
            --set mariadb.db.password=$DB_USER_PASS \
            --namespace=$CIRCLE_PROJECT_REPONAME

      # Wait for the kubernetes deployment to be complete.
      - run: kubectl rollout status deployment/$RELEASE_NAME-drupal --namespace=$CIRCLE_PROJECT_REPONAME --watch

      # TODO: output the right domain.
      - run: |
          echo "Deployed $RELEASE_NAME successfully, your site is available here: http://$DOMAIN"

workflows:
  version: 2
  commit:
    jobs:
      - phpcs
      - build:
          context: global_nonprod
      - deploy:
          context: global_nonprod
          requires:
            - build
