{{- range $index, $job := .Values.php.cron }}
apiVersion: {{ include "drupal.cron.api-version" $ | trim }}
kind: CronJob
metadata:
  {{- $indexHash := sha256sum $index | trunc 3 }}
  {{- $nameAppendix := (gt (len $index) 6) | ternary ( print ($index | trunc 3) print $indexHash ) $index}}
  {{- $releaseNameTrimmed := substr 0 (int (sub 46 (len $nameAppendix))) $.Release.Name }}
  name: {{ $releaseNameTrimmed }}-cron-{{ $nameAppendix }}
  labels:
    {{- include "drupal.release_labels" $ | nindent 4 }}
spec:
  schedule: {{ $job.schedule | replace "~" (randNumeric 1) | quote }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 3600
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  suspend: false
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "drupal.release_labels" $ | nindent 12 }}
            cronjob: "true"
        spec:
          enableServiceLinks: false
          containers:
          - name: drupal-cron
            {{- include "drupal.php-container" $ | nindent 12 }}
            volumeMounts:
              {{- include "drupal.volumeMounts" $ | nindent 14 }}
            command: ["/bin/bash", "-c"]
            args:
              - |
                {{- include "cron.entrypoints" $ | nindent 16 }}
                set -x
                if [ {{ include "drupal.installation-in-progress-test" $ }} ]; then
                  exit 1
                fi

                # Disable debugging while setting up things.
                # Don't output the set command itself.
                { set +x ; } 2>/dev/null

                # Make temporary files names unique by using $$, which is
                # the PID of the current running shell.
                script="/tmp/cron.$$"
                stats="/tmp/stats.$$"
                output="/tmp/output.$$"
                output_truncated="/tmp/output_truncated.$$"
                output_json="/tmp/output_json.$$"

                # We need to save the executable command(s) into a file,
                # because the 'time' can execute only command files,
                # not the shell constructs.
                cat << CMD > "${script}"
                #!/bin/bash
                set -x
                {{ $job.command | nindent 16 }}
                CMD
                chmod 755 "${script}"

                # The execution of the actual cron command.
                # For backward compatibility reasons send the output to stdout as well (tee).
                # Ideally we need %S+%U as a sum, but for the scripts simplisity sake, keep them apart.
                /usr/bin/time -f '"duration_s":%e,"peak_mem_kb":%M,"kernel_cpu_time_s":%S,"user_cpu_time_s":%U' -o "${stats}" "${script}" 2>&1 \
                | tee "${output}"

                # It's tricky to get the exit code of a random command from a pipeline.
                # It is highly shell-dependent.
                exit_code="${PIPESTATUS[0]}"

                # If the exit code is non-zero,
                # the output file contains also a warning, which is not JSON.
                # Get rid of this by extracting only the stats.
                stats="$(grep -E '"duration_s"' ${stats})"

                # If the log entry is too big shorten it.
                output_size=$(stat --format=%s "$output")
                if [[ "$output_size" -gt 8192 ]]; then
                  {
                    head --bytes=4096 < "$output"
                    echo -en "\n\n[---------- truncated ----------]\n\n"
                    tail --bytes=4096 < "$output"
                  } > "$output_truncated"
                  mv "$output_truncated" "$output"
                fi

                # Append newline at the end of the output
                # because otherwise JSON would be on the same line.
                if [[ $(tail -c1 "$output" | wc -l) -eq 0 ]]; then
                  echo
                fi

                # Convert the command output to JSON.
                php -r 'print json_encode(file_get_contents("/dev/stdin"))."\n";' < "${output}" > "${output_json}"

                cron_name="{{ $index }}"

                resources=$(cat <<RESOURCES
                {{ if $job.resources }}
                {{- $resources = $job.resources }}
                {{ else }}
                {{- $resources = $.Values.php.resources }}
                {{ end }}
                RESOURCES

                memory_request='{{ $resources.memory.request | default 0 }}'
                memory_limit='{{ $resources.memory.limit | default 0 }}'
                cpu_request='{{ $resources.cpu.request | default 0 }}'
                cpu_limit='{{ $resources.cpu.limit | default 0 }}'

                # Assemble the JSON output.
                # Add special markers (==) which helps json extraction by a log consumer.
                cat << JSON
                =={"cron_name":"${cron_name}",${stats},"exit_code":${exit_code},"output_size":$output_size,"memory_request":"$memory_request","memory_limit":"$memory_limit","cpu_request":"$cpu_request","cpu_limit":"$cpu_limit","output":$(cat"${output_json}")}==
                JSON

                # Use the exit code of the actual cron command.
                exit "$exit_code"

            resources:
              {{ if $job.resources }}
              {{- $job.resources | toYaml | nindent 14 }}
              {{ else }}
              {{- $.Values.php.resources | toYaml | nindent 14 }}
              {{- end }}
          restartPolicy: Never
          nodeSelector:
            {{ if $job.nodeSelector }}
            {{- $job.nodeSelector | toYaml | nindent 12 }}
            {{ else }}
            {{- $.Values.php.nodeSelector | toYaml | nindent 12 }}
            {{- end }}
          tolerations:
            {{ if $job.nodeSelector }}
            {{- include "drupal.tolerations" $job.nodeSelector | nindent 12 }}
            {{ else }}
            {{- include "drupal.tolerations" $.Values.php.nodeSelector | nindent 12 }}
            {{- end }}

          volumes:
            {{- include "drupal.volumes" $ | nindent 12 }}

          {{- include "drupal.imagePullSecrets" $ | nindent 10 }}
---
{{- end }}
